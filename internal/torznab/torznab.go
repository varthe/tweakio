package torznab

import (
	"encoding/xml"
	"fmt"
	"strconv"
	"tweakio/internal/parser"
)

type TorznabResponse struct {
	XMLName xml.Name       `xml:"rss"`
	Version string         `xml:"version,attr"`
	XMLNS   string         `xml:"xmlns:torznab,attr"`
	Channel TorznabChannel `xml:"channel"`
}

type TorznabChannel struct {
	Title       string        `xml:"title"`
	Description string        `xml:"description"`
	Link        string        `xml:"link"`
	Items       []TorznabItem `xml:"item"`
}

type TorznabItem struct {
	Title       string           `xml:"title"`
	Link        string           `xml:"link"`
	GUID        string           `xml:"guid"`
	Size        int64            `xml:"size"`
	InfoHash    string           `xml:"infohash"`
	Description string           `xml:"description,omitempty"`
	PubDate     string           `xml:"pubDate"`
	Enclosure   TorznabEnclosure `xml:"enclosure"`
	Attributes  []TorznabAttr    `xml:"torznab:attr"`
}

type TorznabEnclosure struct {
	URL    string `xml:"url,attr"`
	Length int64  `xml:"length,attr"`
	Type   string `xml:"type,attr"`
}

type TorznabAttr struct {
	Name  string `xml:"name,attr"`
	Value string `xml:"value,attr"`
}

func ConvertToTorznab(results []parser.TorrentioResult, baseURL string) (string, error) {
	var items []TorznabItem

	for _, r := range results {
		magnetLink := "magnet:?xt=urn:btih:" + r.InfoHash

		attrs := []TorznabAttr{
			{"category", strconv.Itoa(r.Category)},
			{"seeders", strconv.Itoa(r.Peers)},
			{"source", r.Source + " (Tweakio)"},
		}

		item := TorznabItem{
			Title:    r.Title,
			Link:     magnetLink,
			GUID:     r.InfoHash,
			Size:     int64(r.Size * 1024 * 1024 * 1024),
			InfoHash: r.InfoHash,
			PubDate:  "Mon, 01 Jan 2024 00:00:00 +0000",
			Enclosure: TorznabEnclosure{
				URL:    magnetLink,
				Length: int64(r.Size * 1024 * 1024 * 1024),
				Type:   "application/x-bittorrent",
			},
			Attributes: attrs,
		}
		items = append(items, item)
	}

	response := TorznabResponse{
		Version: "2.0",
		XMLNS:   "http://torznab.com/schemas/2015/feed",
		Channel: TorznabChannel{
			Title:       "Tweakio",
			Description: "Generated by Tweakio",
			Link:        baseURL,
			Items:       items,
		},
	}

	output, err := xml.MarshalIndent(response, "", "  ")
	if err != nil {
		return "", fmt.Errorf("failed to generate XML: %w", err)
	}

	return xml.Header + string(output), nil
}

func GenerateFakeResults() (string, error) {
	fakeMovie := parser.TorrentioResult{
		Title:    "No results! Make sure to use the IMDb ID to search",
		InfoHash: "b13d60bd404b65c7484115aa863c8341a8092f55",
		Size:     2.5,
		Peers:    100,
		Category: 2000,
		Source:   "FakeIndexer",
	}
	fakeShow := parser.TorrentioResult{
		Title:    "No results! Make sure to use the IMDb ID to search",
		InfoHash: "b13d60bd404b64c7484115aa863c8341a8092f55",
		Size:     2.5,
		Peers:    100,
		Category: 5000,
		Source:   "FakeIndexer",
	}
	return ConvertToTorznab([]parser.TorrentioResult{fakeMovie, fakeShow}, "http://tweakio:3185/api")
}

func RssResponse() string {
	return `<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel></channel></rss>`
}

func CapsResponse() string {
	return `<?xml version="1.0" encoding="UTF-8"?>
	<caps>
		<server version="1.0" title="Tweakio"/>
		<limits max="100" default="50"/>
		<registration available="no" open="no"/>
		<searching>
			<search available="yes" supportedParams="q"/>
			<tv-search available="yes" supportedParams="q,season,ep,imdbid"/>
			<movie-search available="yes" supportedParams="q,imdbid"/>
		</searching>
		<categories>
			<category id="2000" name="Movies">
				<subcat id="2010" name="Movies/HD"/>
				<subcat id="2020" name="Movies/SD"/>
				<subcat id="2030" name="Movies/UHD"/>
			</category>
			<category id="5000" name="TV">
				<subcat id="5030" name="TV/HD"/>
				<subcat id="5040" name="TV/SD"/>
				<subcat id="5050" name="TV/UHD"/>
			</category>
		</categories>
	</caps>`
}